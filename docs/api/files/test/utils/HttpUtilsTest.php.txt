<?php

/**
 *                          SOFTWARE USE PERMISSION
 *
 *  By downloading and accessing this software and associated documentation
 *  files ("Software") you are granted the unrestricted right to deal in the
 *  Software, including, without limitation the right to use, copy, modify,
 *  publish, sublicense and grant such rights to third parties, subject to the
 *  following conditions:
 *
 *  The following copyright notice and this permission notice shall be included
 *  in all copies, modifications or substantial portions of this Software:
 *  Copyright Â© 2016 GSM Association.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS," WITHOUT WARRANTY OF ANY KIND, INCLUDING
 *  BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 *  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
 *  IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE. YOU AGREE TO INDEMNIFY AND HOLD HARMLESS THE AUTHORS AND COPYRIGHT
 *  HOLDERS FROM AND AGAINST ANY SUCH LIABILITY.
 */
require_once(dirname(__FILE__) . '/../bootstrap.php');

use MCSDK\utils\Constants;
use MCSDK\utils\HttpUtils;

class HttpUtilsTest extends PHPUnit_Framework_TestCase
{
    public function testExtractParametersWithNullURL()
    {
        $url = null;

        $this->assertEmpty(HttpUtils::extractParameters($url));
    }

    public function testExtractParametersWithParams()
    {
        $url = 'http://something.com/some/path?param=1';

        $this->assertEquals(array('param' => '1'), HttpUtils::extractParameters($url));
    }

    public function testGetHTTPURI()
    {
        $url = 'http://something.com/some/path?param=1';

        $this->assertEquals('http://something.com', HttpUtils::getHTTPURI($url));
    }

    public function testGetHTTPPath()
    {
        $url = 'http://something.com/some/path?param=1';

        $this->assertEquals('/some/path', HttpUtils::getHTTPPath($url));
    }

    public function testGetCookiesToProxyWhenCookiesDisabled()
    {
        $this->assertEmpty(HttpUtils::getCookiesToProxy(false, array()));
    }

    public function testGetCookiesToProxyWithEmptyCookies()
    {
        $this->assertEmpty(HttpUtils::getCookiesToProxy(true, array()));
    }

    public function testGetCookiesToProxyWithCookies()
    {
        $testCookies = array(
            'someKey' => 'someValue',
            Constants::MOST_RECENT_SELECTED_OPERATOR_COOKIE_NAME => 'a value to proxy'
        );

        $this->assertEquals(array(Constants::MOST_RECENT_SELECTED_OPERATOR_COOKIE_NAME => 'a value to proxy'),
            HttpUtils::getCookiesToProxy(true, $testCookies));
    }

    public function testGetParameterValueWithPairs()
    {
        $pairs = array(
            'keyOne' => 'valueOne',
            'keyTwo' => 'valueTwo'
        );

        $this->assertEquals($pairs['keyOne'], HttpUtils::getParameterValue($pairs, 'keyOne'));
    }

    public function testGetParameterValueWithEmptyPairs()
    {
        $pairs = array();

        $this->assertNull(HttpUtils::getParameterValue($pairs, 'keyOne'));
    }

    public function testGetParameterValueWithNoMatchingPairs()
    {
        $pairs = array(
            'keyOne' => 'valueOne',
            'keyTwo' => 'valueTwo'
        );

        $this->assertNull(HttpUtils::getParameterValue($pairs, 'keyThree'));
    }
}
