<?php

/**
 *                          SOFTWARE USE PERMISSION
 *
 *  By downloading and accessing this software and associated documentation
 *  files ("Software") you are granted the unrestricted right to deal in the
 *  Software, including, without limitation the right to use, copy, modify,
 *  publish, sublicense and grant such rights to third parties, subject to the
 *  following conditions:
 *
 *  The following copyright notice and this permission notice shall be included
 *  in all copies, modifications or substantial portions of this Software:
 *  Copyright Â© 2016 GSM Association.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS," WITHOUT WARRANTY OF ANY KIND, INCLUDING
 *  BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 *  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
 *  IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE. YOU AGREE TO INDEMNIFY AND HOLD HARMLESS THE AUTHORS AND COPYRIGHT
 *  HOLDERS FROM AND AGAINST ANY SUCH LIABILITY.
 */
require_once(dirname(__FILE__) . '/../bootstrap.php');

use MCSDK\discovery\DiscoveryException;

class DiscoveryExceptionTest extends PHPUnit_Framework_TestCase
{

    /**
     * @expectedException DomainException
     */
    public function testConstructWithJustAMessage()
    {
        $testExceptionMessage = 'Some Exception';

        $discoveryException = new DiscoveryException($testExceptionMessage);

        throw $discoveryException;
    }

    /**
     * @expectedException DomainException
     */
    public function testConstructWithAllAParams()
    {
        $testExceptionMessage = 'Some Exception';
        $testExceptionURI = 'http://testing.com';
        $testExceptionCode = 30;
        $testExceptionHeaders = 'test: headers;';
        $testExceptionContents = 'Some Contents';

        $discoveryException = new DiscoveryException($testExceptionMessage, $testExceptionURI, $testExceptionCode, $testExceptionHeaders, $testExceptionContents);

        throw $discoveryException;
    }

    public function testGetUri()
    {
        $testExceptionMessage = 'Some Exception';
        $testExceptionURI = 'http://testing.com';

        $discoveryException = new DiscoveryException($testExceptionMessage, $testExceptionURI);

        $this->assertEquals($testExceptionURI, $discoveryException->getUri());
    }

    public function testGetResponseCode()
    {
        $testExceptionMessage = 'Some Exception';
        $testExceptionCode = 30;

        $discoveryException = new DiscoveryException($testExceptionMessage, null, $testExceptionCode);

        $this->assertEquals($testExceptionCode, $discoveryException->getResponseCode());
    }

    public function testGetHeaders()
    {
        $testExceptionMessage = 'Some Exception';
        $testExceptionHeaders = 'test: headers;';

        $discoveryException = new DiscoveryException($testExceptionMessage, null, null, $testExceptionHeaders);

        $this->assertEquals($testExceptionHeaders, $discoveryException->getHeaders());
    }

    public function testGetContents()
    {
        $testExceptionMessage = 'Some Exception';
        $testExceptionContents = 'Some Contents';

        $discoveryException = new DiscoveryException($testExceptionMessage, null, null, null, $testExceptionContents);

        $this->assertEquals($testExceptionContents, $discoveryException->getContents());
    }

}

