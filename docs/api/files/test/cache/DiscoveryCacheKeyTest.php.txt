<?php

/**
 *                          SOFTWARE USE PERMISSION
 *
 *  By downloading and accessing this software and associated documentation
 *  files ("Software") you are granted the unrestricted right to deal in the
 *  Software, including, without limitation the right to use, copy, modify,
 *  publish, sublicense and grant such rights to third parties, subject to the
 *  following conditions:
 *
 *  The following copyright notice and this permission notice shall be included
 *  in all copies, modifications or substantial portions of this Software:
 *  Copyright Â© 2016 GSM Association.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS," WITHOUT WARRANTY OF ANY KIND, INCLUDING
 *  BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 *  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
 *  IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE. YOU AGREE TO INDEMNIFY AND HOLD HARMLESS THE AUTHORS AND COPYRIGHT
 *  HOLDERS FROM AND AGAINST ANY SUCH LIABILITY.
 */
require_once(dirname(__FILE__) . '/../bootstrap.php');

use MCSDK\cache\DiscoveryCacheKey;

class DiscoveryCacheKeyTest extends PHPUnit_Framework_TestCase
{

    const EXPECTED_INSTANCE = 'MCSDK\cache\DiscoveryCacheKey';

    private $selectedMCC;
    private $selectedMNC;
    private $identifiedMCC;
    private $identifiedMNC;
    private $discoveryCacheKey;

    public function __construct()
    {
        $this->selectedMCC = 'GB';
        $this->selectedMNC = '+44';
        $this->identifiedMCC = 'US';
        $this->identifiedMNC = '+23';

        $this->discoveryCacheKey = new DiscoveryCacheKey($this->selectedMCC, $this->selectedMNC, $this->identifiedMCC, $this->identifiedMNC);

        parent::__construct();
    }

    public function testGetSelectedMCC()
    {
        $this->assertEquals($this->selectedMCC, $this->discoveryCacheKey->getSelectedMCC());
    }

    public function testGetSelectedMNC()
    {
        $this->assertEquals($this->selectedMNC, $this->discoveryCacheKey->getSelectedMNC());
    }

    public function testGetIdentifiedMCC()
    {
        $this->assertEquals($this->identifiedMCC, $this->discoveryCacheKey->getIdentifiedMCC());
    }

    public function testGetIdentifiedMNC()
    {
        $this->assertEquals($this->identifiedMNC, $this->discoveryCacheKey->getIdentifiedMNC());
    }


    public function testNewWithDetailsNullMCC()
    {
        $this->assertNull($this->discoveryCacheKey->newWithDetails(null, $this->selectedMNC));
    }

    public function testNewWithDetailsEmptyMCC()
    {
        $this->assertNull($this->discoveryCacheKey->newWithDetails('', $this->selectedMNC));
    }

    public function testNewWithDetailsNullMNC()
    {
        $this->assertNull($this->discoveryCacheKey->newWithDetails($this->selectedMCC, null));
    }

    public function testNewWithDetailsEmptyMNC()
    {
        $this->assertNull($this->discoveryCacheKey->newWithDetails($this->selectedMCC, ''));
    }

    public function testNewWithDetailsData()
    {
        $this->assertInstanceOf(self::EXPECTED_INSTANCE, $this->discoveryCacheKey->newWithDetails($this->selectedMCC, $this->selectedMNC));
    }


    public function testNewWithSelectedDataNullMCC()
    {
        $this->assertNull($this->discoveryCacheKey->newWithSelectedData(null, $this->selectedMNC));
    }

    public function testNewWithSelectedDataEmptyMCC()
    {
        $this->assertNull($this->discoveryCacheKey->newWithSelectedData('', $this->selectedMNC));
    }

    public function testNewWithSelectedDataNullMNC()
    {
        $this->assertNull($this->discoveryCacheKey->newWithSelectedData($this->selectedMCC, null));
    }

    public function testNewWithSelectedDataEmptyMNC()
    {
        $this->assertNull($this->discoveryCacheKey->newWithSelectedData($this->selectedMCC, ''));
    }

    public function testNewWithSelectedData()
    {
        $this->assertInstanceOf(self::EXPECTED_INSTANCE, $this->discoveryCacheKey->newWithSelectedData($this->selectedMCC, $this->selectedMNC));
    }

    public function testNewWithIdentifiedDataNullMCC()
    {
        $this->assertNull($this->discoveryCacheKey->newWithIdentifiedData(null, $this->identifiedMNC));
    }

    public function testNewWithIdentifiedDataEmptyMCC()
    {
        $this->assertNull($this->discoveryCacheKey->newWithIdentifiedData('', $this->identifiedMNC));
    }

    public function testNewWithIdentifiedDataNullMNC()
    {
        $this->assertNull($this->discoveryCacheKey->newWithIdentifiedData($this->identifiedMCC, null));
    }

    public function testNewWithIdentifiedDataEmptyMNC()
    {
        $this->assertNull($this->discoveryCacheKey->newWithIdentifiedData($this->identifiedMCC, ''));
    }

    public function testNewWithIdentifiedData()
    {
        $this->assertInstanceOf(self::EXPECTED_INSTANCE, $this->discoveryCacheKey->newWithIdentifiedData($this->identifiedMCC, $this->identifiedMNC));
    }

}

