<?php

/**
 *                          SOFTWARE USE PERMISSION
 *
 *  By downloading and accessing this software and associated documentation
 *  files ("Software") you are granted the unrestricted right to deal in the
 *  Software, including, without limitation the right to use, copy, modify,
 *  publish, sublicense and grant such rights to third parties, subject to the
 *  following conditions:
 *
 *  The following copyright notice and this permission notice shall be included
 *  in all copies, modifications or substantial portions of this Software:
 *  Copyright Â© 2016 GSM Association.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS," WITHOUT WARRANTY OF ANY KIND, INCLUDING
 *  BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 *  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
 *  IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE. YOU AGREE TO INDEMNIFY AND HOLD HARMLESS THE AUTHORS AND COPYRIGHT
 *  HOLDERS FROM AND AGAINST ANY SUCH LIABILITY.
 */

namespace MCSDK\oidc;

/**
 * A class that holds a valid response from {@link IOIDC#requestToken
 * (DiscoveryResponse, String, String, TokenOptions, IRequestTokenCallback)}.
 */
class RequestTokenResponseData
{

    /**
     * @var \DateTime
     */
    private $_timeReceived;
    private $_originalResponse;
    private $_access_token;
    private $_token_type;
    private $_refresh_token;
    private $_expires_in;
    private $_expires;
    private $_parsedIdToken;

    /**
     * Get the time the response was received.
     *
     * @return \DateTime The time the response was received.
     */
    public function getTimeReceived()
    {
        return $this->_timeReceived;
    }

    /**
     * Set the time the response was received.
     *
     * @param \DateTime $timeReceived The time the response was received.
     */
    public function setTimeReceived($timeReceived)
    {
        $this->_timeReceived = $timeReceived;
        $this->updateExpires();
    }

    /**
     * Calculate the expires value.
     */
    private function updateExpires()
    {
        if (is_null($this->_expires_in) || is_null($this->_timeReceived)) {
            $this->_expires = null;
        } else {
            $this->_expires = $this->_timeReceived->add(new \DateInterval('PT' . $this->_expires_in . 'S'));
        }
    }

    /**
     * Get the original Json response from the authorization end point.
     *
     * @return string The Json response.
     */
    public function getOriginalResponse()
    {
        return $this->_originalResponse;
    }

    /**
     * Set the original Json response from the authorization end point.
     *
     * @param string $originalResponse The Json response.
     */
    public function setOriginalResponse($originalResponse)
    {
        $this->_originalResponse = $originalResponse;
    }

    /**
     * Get the access token generated by the authentication/authorization server.
     *
     * @return string The value of the access_token field.
     */
    public function get_access_token()
    {
        return $this->_access_token;
    }

    /**
     * Set the access token generated by the authentication/authorization server.
     *
     * @param string $access_token The value of the access_token field.
     */
    public function set_access_token($access_token)
    {
        $this->_access_token = $access_token;
    }

    /**
     * Get the type of the access token generated (should be "Bearer").
     *
     * @return string The value of the token_type field.
     */
    public function get_token_type()
    {
        return $this->_token_type;
    }

    /**
     * Set the type of the access token generated (should be "Bearer").
     *
     * @param string $token_type The value of the token_type field.
     */
    public function set_token_type($token_type)
    {
        $this->_token_type = $token_type;
    }

    /**
     * Get the optional refresh token generated by the authentication/authorization server.
     *
     * @return string The value of the refresh_token field.
     */
    public function get_refresh_token()
    {
        return $this->_refresh_token;
    }

    /**
     * Set the optional refresh token generated bt the authentication/authorization server.
     *
     * @param string $refresh_token The value of the refresh_token field.
     */
    public function set_refresh_token($refresh_token)
    {
        $this->_refresh_token = $refresh_token;
    }

    /**
     * Get the duration (in seconds) that the access token is valid for.
     *
     * @return int The value of the expires_in field.
     */
    public function get_expires_in()
    {
        return $this->_expires_in;
    }

    /**
     * Set the duration (in seconds) that the access token is valid for.
     *
     * @param int $expires_in The value of the expires_in field.
     */
    public function set_expires_in($expires_in)
    {
        $this->_expires_in = $expires_in;
        $this->updateExpires();
    }

    /**
     * The time the response will expire.
     *
     * This is calculated from the time received and expires_in value.
     *
     * @return int The time the response expires.
     */
    public function getExpires()
    {
        return $this->_expires;
    }

    /**
     * Get the parsed id_token from the Json response.
     *
     * @return ParsedIdToken The parsed id_token.
     */
    public function getParsedIdToken()
    {
        return $this->_parsedIdToken;
    }

    /**
     * Set the parsed id_token from the Json response.
     *
     * @param ParsedIdToken $parsedIdToken The parsed id_token.
     */
    public function setParsedIdToken(ParsedIdToken $parsedIdToken)
    {
        $this->_parsedIdToken = $parsedIdToken;
    }

}

